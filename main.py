import logging
import time

from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '5922594528:AAEgkkNcSNnMyA_o0JnbqwO6oBl4m4Bax5Y'  # –Ω–∏–∫—É–¥–∞ –Ω–µ —Å–∫–∏–¥—ã–≤–∞—Ç—å

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# button_start = KeyboardButton()

start_button = [
    [
        types.KeyboardButton(text='/start'),
        types.KeyboardButton(text='/menu'),
        types.KeyboardButton(text='/techsupport'),
        types.KeyboardButton(text='/howtouse')
    ],
]


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard_start = types.ReplyKeyboardMarkup(keyboard=start_button)
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id} {user_full_name} {time.asctime()}')
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}", reply_markup=keyboard_start)


menuKB = InlineKeyboardMarkup(row_width=1)
menuButton = InlineKeyboardButton(text='–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ', callback_data="menu_human_and_society")
menuButton2 = InlineKeyboardButton(text='–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data="menu_2")
menuButton3 = InlineKeyboardButton(text='—á–µ—Ç 1', callback_data="menu_3")
menuButton4 = InlineKeyboardButton(text='—á–µ—Ç 2 ', callback_data="menu_4")
menuButton5 = InlineKeyboardButton(text='—á–µ—Ç 3', callback_data="menu_5")
menuKB.add(menuButton, menuButton2, menuButton3, menuButton4, menuButton5)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    await message.answer('—Ç—É—Ç –º–µ–Ω—é', reply_markup=menuKB)
    # await message.reply()
    # await callback.answer();


text_human_and_society = '–ß–ï–õ–û–í–ï–ö –ò –û–ë–©–ï–°–¢–í–û\n \n1. –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å \n2. –ü–æ–∑–Ω–∞–Ω–∏–µ \n3. –ò—Å—Ç–∏–Ω–∞ \n4. –ß–µ–ª–æ–≤–µ–∫ \n5. –°–æ–∑–Ω–∞–Ω–∏–µ' \
                         '\n7. –ß—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–∑–Ω–∞–Ω–∏–µ \n8. –†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–Ω–∞–Ω–∏–µ \n9. –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∑–Ω–∞–Ω–∏–µ \n10. –ù–∞—É—á–Ω–æ–µ –ø–æ–∑–Ω–∞–Ω–∏–µ (–Ω–∞—É–∫–∞) ' \
                         '\n11. –ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ \n12. –ú—ã—à–ª–µ–Ω–∏–µ \n13. –ò—Å–∫—É—Å—Å—Ç–≤–æ \n14. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ \n15. –†–µ–ª–∏–≥–∏—è \n16. –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–≥–∏–∏ \n17. ' \
                         '–ú–æ—Ä–∞–ª—å \n18. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏' \
                         '\n19. –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∑–Ω–∞–Ω–∏–µ \n20. –û–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ \n21. –ò–≥—Ä–∞ –∫–∞–∫ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ \n22. –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å ' \
                         '\n23. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ \n24. –°–≤–æ–±–æ–¥–∞ \n25. –û–±—â–µ—Å—Ç–≤–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ \n26. –û–±—â–µ—Å—Ç–≤–æ –∫–∞–∫ —á–∞—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞ ' \
                         '\n27. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å \n28.–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç \n29. –ö—É–ª—å—Ç—É—Ä–∞  \n30. –≠–ª–∏—Ç–∞—Ä–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞ \n31. –ú–∞—Å—Å–æ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞ ' \
                         '\n32. –ù–∞—Ä–æ–¥–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞ \n33. –†–µ—Ñ–æ—Ä–º–∞ \n34. –†–µ–≤–æ–ª—é—Ü–∏—è \n35. –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å \n36. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ ' \
                         '\n37. –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ \n38. –ü–æ—Å—Ç–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ \n39. –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è \n40. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞'


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('menu_'))
async def process_callback_menubutton(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    code = callback_query.data
    logging.info({code})

    if code == 'menu_human_and_society':
        await bot.send_message(chat_id=user_id,
                               text=text_human_and_society)
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 'menu_2':
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 'menu_3':
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ —Ç—Ä–µ—Ç—å—è –∫–Ω–æ–ø–∫–∞')
    elif code == 'menu_4':
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ 4 –∫–Ω–æ–ø–∫–∞')
    elif code == 'menu_5':
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code} ')


@dp.message_handler(commands=['techsupport'])
async def techSupport(message: types.Message):
    await message.answer("–û–Ω –≤–æ –≤—Å–µ–º –≤–∏–Ω–æ–≤–∞—Ç - @lkk_lkk")


@dp.message_handler(commands=['howtouse'])
async def howToUse(message: types.Message):
    await message.answer("—Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")


@dp.message_handler()
async def echo(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    message_name = message.text
    logging.info(f'{user_id} {user_full_name} {time.asctime()} {message_name}')
    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
