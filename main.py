import logging
import time

from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = ''  # –Ω–∏–∫—É–¥–∞ –Ω–µ —Å–∫–∏–¥—ã–≤–∞—Ç—å

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# button_start = KeyboardButton()

start_button = [
    [
        types.KeyboardButton(text='/start'),
        types.KeyboardButton(text='/menu'),
        types.KeyboardButton(text='/techsupport'),
        types.KeyboardButton(text='/howtouse')
    ],
]


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard_start = types.ReplyKeyboardMarkup(keyboard=start_button)
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id} {user_full_name} {time.asctime()}')
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}", reply_markup=keyboard_start)


menuKB = InlineKeyboardMarkup(row_width=1)
menuButton = InlineKeyboardButton(text='–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ', callback_data="menu_1")
menuButton2 = InlineKeyboardButton(text='–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data="menu_2")
menuButton3 = InlineKeyboardButton(text='—á–µ—Ç 1', callback_data="menu_3")
menuButton4 = InlineKeyboardButton(text='—á–µ—Ç 2 ', callback_data="menu_4")
menuButton5 = InlineKeyboardButton(text='—á–µ—Ç 3', callback_data="menu_5")
menuKB.add(menuButton, menuButton2, menuButton3, menuButton4, menuButton5)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    await message.answer('—Ç—É—Ç –º–µ–Ω—é', reply_markup=menuKB)
    #await message.reply()
    #await callback.answer();


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('menu_'))
async def process_callback_menubutton(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    logging.info({code})
    if code.isdigit(): # –ò—Å–ø—Ä–∞–≤—å –Ω–∞—Ö—É–π –¥–∞—É–Ω –±–µ–∑–º–∞–º–Ω—ã–π, –Ω–∞—Ö—É–π  –Ω—Ç
        code = int(code)
        
    if code == 1:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code} ')


@dp.message_handler(commands=['techsupport'])
async def techSupport(message: types.Message):
    await message.answer("–û–Ω –≤–æ –≤—Å–µ–º –≤–∏–Ω–æ–≤–∞—Ç - @lkklkk")


@dp.message_handler(commands=['howtouse'])
async def howToUse(message: types.Message):
    await message.answer("—Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")


@dp.message_handler()
async def echo(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    message_name = message.text
    logging.info(f'{user_id} {user_full_name} {time.asctime()} {message_name}')
    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
